plugins {
    id 'java'
    id 'org.springframework.boot' version '3.3.8'
    id 'io.spring.dependency-management' version '1.1.7'
    id 'org.graalvm.buildtools.native' version '0.10.4'
}

apply from: "$rootDir/gradle/jacoco.gradle"
apply from: "$rootDir/gradle/checkstyle.gradle"

group = 'cn.scifi'
version = '1.0.0-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
    implementation.exclude group: 'org.springframework.boot', module: 'spring-boot-starter-tomcat'
}

ext {
    set('springAiVersion', "1.0.0-M2")
    set('mybatisPlusVersion', '3.5.7')
    set('springdocVersion', '2.6.0')
    set('guavaVersion', '33.3.0-jre')
    set('freemarkerVersion', '2.3.33')
    set('nimbusJwtVersion', '9.41.1')
    set('shardingSphereVersion', '5.2.1')
    set('shardingJdbcVersion', '5.5.1')
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.ai:spring-ai-bom:${springAiVersion}"
    }
    dependencies {
        dependency "com.baomidou:mybatis-plus-spring-boot3-starter:${mybatisPlusVersion}"
        dependency "com.baomidou:mybatis-plus-boot-starter-test:${mybatisPlusVersion}"
        dependency "com.baomidou:mybatis-plus-generator:${mybatisPlusVersion}"
        dependency "org.springdoc:springdoc-openapi-starter-webmvc-ui:${springdocVersion}"
        dependency "org.apache.shardingsphere:shardingsphere-jdbc-core-spring-boot-starter:${shardingSphereVersion}"
        dependency "org.apache.shardingsphere:shardingsphere-jdbc:${shardingJdbcVersion}"
        dependency "com.google.guava:guava:${guavaVersion}"
        dependency "org.freemarker:freemarker:${freemarkerVersion}"
        dependency "com.nimbusds:nimbus-jose-jwt:${nimbusJwtVersion}"
    }
}

repositories {
    maven { url "https://maven.aliyun.com/repository/public" }
    mavenCentral()
    maven { url 'https://repo.spring.io/milestone' }
}

dependencies {
    implementation(
            'org.springframework.boot:spring-boot-starter-web',
            'com.baomidou:mybatis-plus-spring-boot3-starter',
            'org.springframework.boot:spring-boot-starter-security',
            'org.springframework.boot:spring-boot-starter-undertow',
            'org.springframework.boot:spring-boot-starter-validation',
            'org.springframework.ai:spring-ai-ollama-spring-boot-starter',
            'org.springdoc:springdoc-openapi-starter-webmvc-ui',
            'com.google.guava:guava',
            'org.apache.shardingsphere:shardingsphere-jdbc',
            'org.springframework.boot:spring-boot-starter-actuator'
    )
    runtimeOnly 'com.mysql:mysql-connector-j'
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.security:spring-security-test'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'com.baomidou:mybatis-plus-boot-starter-test'
    testImplementation 'com.baomidou:mybatis-plus-generator'
    testImplementation 'org.freemarker:freemarker'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

[compileJava, compileTestJava]*.options.collect { options ->
    options.encoding = 'UTF-8'
    options.compilerArgs << '-parameters'
}

//compileJava.dependsOn project(':ui').getTasksByName('buildui', false)
//processResources {
//    from(project(':ui').file('dist').path) {
//        into 'public'
//    }
//}

tasks.withType(AbstractArchiveTask).configureEach {
    setProperty("archiveFileName", project.name + ".jar")
}

tasks.named('test') {
    useJUnitPlatform()
}